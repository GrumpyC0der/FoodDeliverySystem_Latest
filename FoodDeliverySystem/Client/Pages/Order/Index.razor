@page "/order"
@using FoodDeliverySystem.Shared.Models
@inject HttpClient Http
<h1 class="border-Top-Bottom text-danger">Order</h1>
@code{ 
   public string one = "<h1>Hello Mohsin</h1>";

    
}
<div id="test" >

</div>
<div class="row">
    <div class="col-md-6">
        <a href='/order/add' class="btn btn-primary" role="button">
            <i class="oi oi-plus"></i>
            Add order
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search order by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="Filterorder" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />
@if (orderList == null)
{
    <p><em>Loading...</em></p>
}
else
{
   <table class="table table-striped align-middle table-bordered table-sm">
       <thead class="table-primary">
            <tr>
                <th>OrderId</th>
                <th>OrderTime</th>
                <th>OrderFee</th>
                <th>Customer</th>
                <th>Action</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var order in orderList)
            {
                <tr>
                    <td>@order.OrderId</td>
                    <td>@order.OrderTime</td>
                    <td>@order.OrderFee</td>
                    <td>@order.Customer.CustomerName</td>
                    <td>
                        <a href='/order/edit/@order.OrderId' class="icofont icofont-pen-alt-1  custom-text-primary " role="button">
                            Edit
                        </a>
                        <a href='/order/detail/@order.OrderId' class=" custom-text-primary" role="button">
                            Detail
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}
@code {
    protected List<Order> orderList = new();
    protected List<Order> searchorderData = new();
    protected Order order = new();
    protected string SearchString { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await Getorder();
    }
    protected async Task Getorder()
    {
        orderList = await Http.GetFromJsonAsync<List<Order>>("api/order");
        searchorderData = orderList;
    }
    protected void Filterorder()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            orderList = searchorderData
                .Where(x => x.Customer.CustomerName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            orderList = searchorderData;
        }
    }
    protected void DeleteConfirm(int orderID)
    {
        order = orderList.FirstOrDefault(x => x.OrderId == orderID);
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        orderList = searchorderData;
    }


}
